-- This script initializes the database schema for the fleet management application.
-- It creates the following tables within the 'api' schema:
-- 1. taxis: Stores information about taxis, including their ID and plate number.
-- 2. trajectories: Stores trajectory data for taxis, including timestamps, latitude, and longitude.
-- 3. roles: Stores user roles with unique role names.
-- 4. users: Stores user information, including name, email, password, and role associations.

CREATE SCHEMA IF NOT EXISTS api;
CREATE SCHEMA IF NOT EXISTS api;

CREATE TABLE IF NOT EXISTS api.taxis
(
    id    integer                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    plate character varying(255) NOT NULL,
    CONSTRAINT taxis_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS api.trajectories
(
    id        integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    taxi_id   integer,
    date      timestamp(6) without time zone,
    latitude  double precision,
    longitude double precision,
    CONSTRAINT trajectories_pkey PRIMARY KEY (id),
    CONSTRAINT trajectories_taxi_id_fkey FOREIGN KEY (taxi_id)
        REFERENCES api.taxis (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS api.roles
(
    id        integer                NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    role_name character varying(255) NOT NULL,
    CONSTRAINT role_name_unique UNIQUE (role_name)
);

CREATE TABLE IF NOT EXISTS api.users
(
    id                      integer                NOT NULL GENERATED ALWAYS AS IDENTITY,
    name                    character varying(255) NOT NULL,
    email                   character varying(255) NOT NULL,
    password                character varying(255) NOT NULL,
    is_enabled              boolean                NOT NULL,
    account_non_expired     boolean                NOT NULL,
    account_non_locked      boolean                NOT NULL,
    credentials_non_expired boolean                NOT NULL,
    role_id integer NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_role_id_fkey FOREIGN KEY (role_id)
        REFERENCES api.roles (id)
);
